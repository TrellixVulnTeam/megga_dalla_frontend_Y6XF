{"ast":null,"code":"import { catchError, map, tap } from 'rxjs/operators';\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { Userr } from \"../models/auth\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, route) {\n      this.http = http;\n      this.route = route;\n      this._isLoggedin = new BehaviorSubject(false);\n      this.isLoggedin = this._isLoggedin.asObservable();\n      this.user = new BehaviorSubject(null);\n      this.initialUser = null;\n      this.profileSource = new BehaviorSubject(this.initialUser);\n      this.profile = this.profileSource.asObservable();\n      this.url = `${environment.apiUrl}`;\n      this.profileSource.next(this.getLocalStorage('profile'));\n      const token = localStorage.getItem('accessToken');\n\n      this._isLoggedin.next(!!token);\n    }\n\n    signupUser(user) {\n      return this.http.post(`${this.url}/signup/`, user).pipe(catchError(this.handleError), tap(res => {\n        console.log(res);\n      }));\n    }\n\n    loginUser(account) {\n      return this.http.post(`${this.url}/login/`, account).pipe(catchError(this.handleError), tap(res => {\n        console.log(res);\n        this.setToken(res);\n        this.handleAuth(res);\n        this.getProfile().subscribe();\n        return this.profile.subscribe(user => user);\n      }));\n    }\n\n    getProfile() {\n      return this.http.get(`${this.url}/profile`).pipe(map(profile => {\n        console.log(profile);\n        this.setLocalStorage('profile', profile);\n        this.profileSource.next(profile);\n        return profile;\n      }));\n    }\n\n    autologin() {\n      const userData = JSON.parse(localStorage.getItem('user'));\n      console.log(userData);\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new Userr(userData.id, userData.email, userData.username, userData.is_vendor, userData.is_customer);\n      this.user.next(loadedUser);\n      console.log(loadedUser);\n      return;\n    }\n\n    handleError(error) {\n      console.log(error);\n      let errormessage = 'An unknown errror occured';\n\n      if (!error.error) {\n        return throwError(errormessage);\n      }\n\n      if (error.error.non_field_errors) {\n        errormessage = error.error.non_field_errors[0];\n      }\n\n      if (error.error.email) {\n        errormessage = error.error.email[0];\n      }\n\n      if (error.error.username) {\n        errormessage = error.error.username[0];\n      }\n\n      return throwError(errormessage);\n    }\n\n    handleAuth(res) {\n      const user = new Userr(res.id, res.email, res.username, res.is_vendor, res.is_customer);\n      this.user.next(user);\n      console.log(user);\n      localStorage.setItem('user', JSON.stringify(user));\n\n      this._isLoggedin.next(true);\n    }\n\n    logout() {\n      this.user.next(null);\n      this.removeLocalStorage();\n      this.route.navigate(['/']);\n    }\n\n    setToken(token) {\n      this.setLocalStorage('accessToken', token.access);\n      this.setLocalStorage('refreshToken', token.refresh); // decode the token to read the user_id and expiration timestamp\n\n      const accessTokenParts = token.access.split('.');\n      const refreshTokenParts = token.refresh.split('.');\n      const accessToken = JSON.parse(window.atob(accessTokenParts[1]));\n      const refreshToken = JSON.parse(window.atob(refreshTokenParts[1]));\n      this.setLocalStorage('accessExpiry', new Date(accessToken.exp * 1000));\n      this.setLocalStorage('refreshExpiry', new Date(refreshToken.exp * 1000));\n    }\n\n    setLocalStorage(key, value) {\n      if (key === 'profile') value = JSON.stringify(value);\n      localStorage.setItem(key, value);\n      return this.getLocalStorage(key);\n    }\n\n    removeLocalStorage() {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('profile');\n      localStorage.removeItem('accessExpiry');\n      localStorage.removeItem('refreshExpiry');\n      localStorage.removeItem('user');\n      return this.getLocalStorage('accessToken');\n    }\n\n    getLocalStorage(key) {\n      const item = localStorage.getItem(key);\n      if (key === 'profile' && item != null) return JSON.parse(item);\n      return item;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}